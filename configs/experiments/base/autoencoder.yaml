machine: "local"  # or "cluster"
device: "cuda"  # or "cpu"
anomaly_detection: False  # slows down the code
mode: autoencoder
dataset_name: 'qm9_molecules_dataset.pkl'
misc_dataset_name: 'misc_data_for_qm9_molecules_dataset.npy'
dataset_yaml_path: '/dataset/qm9_autoencoder.yaml' # '/dataset/full_discriminator.yaml' #
extra_test_set_name: null
save_checkpoints: True # will do it always on cluster, only locally if True
checkpointing_loss_type: test  # will save a new checkpoint when a minimum of this is reached
model_names: ['autoencoder']
sweep_id: null
sweep_path: null

dataset:
  max_dataset_length: 10000000
  test_fraction: 0.2
  filter_protons: True
  regression_target: molecule_gap_energy

# batching & convergence
early_epochs_step_override: 5
num_early_epochs: 0
grow_batch_size: True
min_batch_size: 10
max_batch_size: 500
batch_growth_increment: 0.1 # fraction of batch size to grow by each epoch
overfit_tolerance: 4  # maximum allowed ratio of test_loss/train_loss
minimum_epochs: 2000
max_epochs: 10000 # 0 epochs takes us straight to sampling/evaluation (only implemented for GAN)
history: 100  # for convergence checks
gradient_norm_clip: 1
extra_test_period: 1 # unused

logger:
  run_name: dev
  experiment_tag: dev
  mini_csp_frequency: 1 # unused here
  sample_reporting_frequency: 10  # how often to do detailed reporting with figures
  log_figures: True

seeds:
  model: 12345
  dataset: 0

# for reloading prior checkpoints
model_paths:
  discriminator: null
  generator: null
  regressor: null
  autoencoder: null
  embedding_regressor: null

positional_noise:
  discriminator: 0
  generator: 0
  regressor: 0
  autoencoder: 0

generate_sgs: null
supercell_size: 5

autoencoder:
  infer_protons: False
  KLD_weight: 0.001
  KLD_threshold: 0.97
  type_distance_scaling: 0.5
  init_sigma: 0.15
  evaluation_sigma: 0.05
  sigma_lambda: 0.99
  sigma_threshold: 0.01
  overlap_eps:
    test: 1.0E-3
  max_overlap_threshold: 0.25
  node_weight_temperature: 1

  # discriminator optimizer and model
  optimizer:
    optimizer: adamw
    init_lr: 1.0E-4
    encoder_init_lr: 5.0E-5
    decoder_init_lr: 5.0E-5
    max_lr: 2.0E-4
    min_lr: 1.0E-6
    lr_schedule: True
    beta1: 0.9
    beta2: 0.999
    weight_decay: 0.05
    convergence_eps: 1.0E-5
    lr_growth_lambda: 1.05
    lr_shrink_lambda: 0.99
    use_plateau_scheduler: False

  model:
    variational_encoder: False
    encoder_type: 'equivariant' # only equivariant now
    decoder_type: 'equivariant'

    num_graph_convolutions: 2
    embedding_depth: 256
    bottleneck_dim: 256
    graph_message_depth: 128  # must cleanly divide num_heads
    num_attention_heads: 16
    graph_aggregator: 'equivariant softmax'
    nodewise_fc_layers: 2
    activation: 'gelu'
    num_decoder_layers: 4
    decoder_ramp_depth: True
    num_decoder_points: 256

    decoder_norm_mode: 'layer'
    graph_node_norm: 'graph layer'
    encoder_vector_norm: 'graph vector layer' #'graph vector layer'
    decoder_vector_norm: 'vector layer'

    graph_node_dropout: 0.2
    graph_message_dropout: 0
    decoder_dropout_probability: 0.2

    num_radial: 32
    radial_function: bessel
    max_num_neighbors: 100
    convolution_cutoff: 2
    atom_type_embedding_dims: 32

regressor:
  optimizer: null
  model: null


embedding_regressor:
  optimizer: null
  model: null


# for GAN training
generator:
  train_vdw: False
  train_adversarially: False
  train_h_bond: False # (non-directional)
  canonical_conformer_orientation: 'random'

  #generator optimizer and model
  optimizer: null
  model: null

discriminator:
  # settings
  train_adversarially: False
  train_on_randn: False
  train_on_distorted: False

  # discriminator optimizer and model
  optimizer: null
  model: null
